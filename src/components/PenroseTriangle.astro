---
interface Props {
	class?: string;
}

const { class: className = "" } = Astro.props;
---

<div class={`penrose-container ${className}`}>
	<div class="shape">
		<div class="bottom-hide"></div>
		<div class="bottom b"></div>
		<div class="left"></div>
		<div class="top"></div>
		<div class="bottom f"></div>
		<div class="ball-container">
			<div class="ball">
				<div class="highlight"></div>
			</div>
			<div class="shadow-side"></div>
			<div class="shadow-bottom"></div>
		</div>
	</div>
</div>

<style>
	:root {
		--cube-height: 12px;
		--cube-color: #0fb3a1;
		--color-shade: 15%;
		--ball-size: 15px;
	}

	/* Light Theme */
	:root[data-theme="light"] {
		--cube-color: hsl(var(--triangle-color)); /* Light theme cube color */
	}

	/* Dark Theme */
	:root[data-theme="dark"] {
		--cube-color: hsl(var(--triangle-color)); /* Dark theme cube color */
	}

	.penrose-container {
		height: 75px;
		width: 55px;
		position: relative;
		display: inline-block;
		transform: scale(0.8);
	}

	.shape {
		position: relative;
		padding: 0 8px;
		height: 75px;
		width: 100%;
	}

	.left,
	.top,
	.bottom {
		transform: rotateX(45deg) rotateZ(45deg);
		position: absolute;
		width: var(--cube-height);
		height: var(--cube-height);
		transform-origin: 0 50%;
		background-color: var(--cube-color);
		transform-style: preserve-3d;
	}

	.left::before,
	.top::before,
	.bottom::before,
	.left::after,
	.top::after,
	.bottom::after {
		position: absolute;
		content: "";
		top: 0;
		left: 0;
		width: var(--cube-height);
		height: var(--cube-height);
	}

	.left::before,
	.top::before,
	.bottom::before {
		transform-origin: 0% 100%;
		transform: rotateX(-90deg) translate3d(0, var(--cube-height), 0);
		background-color: color-mix(in srgb, var(--cube-color), black var(--color-shade));
	}

	.left::after,
	.top::after,
	.bottom::after {
		transform-origin: 100% 0%;
		transform: rotateY(90deg) translate3d(var(--cube-height), 0, 0);
		background-color: color-mix(in srgb, var(--cube-color), white var(--color-shade));
	}

	.left {
		transform: rotateX(45deg) rotateZ(45deg) translate3d(-1px, 0, 0);
		z-index: 2;
	}

	.left::before {
		transform-origin: 0% calc(100% / 8.08);
		height: calc(var(--cube-height) * 8.08);
		transform: rotateX(-90deg) translate3d(0, var(--cube-height), 0);
	}

	.left::after {
		transform-origin: calc(100% / 8.08) 0%;
		width: calc(var(--cube-height) * 8.08);
	}

	.top {
		width: calc(var(--cube-height) * 5);
		z-index: 4;
	}

	.top::before {
		width: calc(var(--cube-height) * 5);
	}

	.top::after {
		transform-origin: 500% 0;
		transform: rotateY(90deg) translate3d(calc(var(--cube-height) * 5), 0, 0);
	}

	.bottom {
		width: calc(var(--cube-height) * 5 + 2px);
		transform: rotateX(45deg) rotateZ(-45deg)
			translate3d(
				calc(-1 * (var(--cube-height) * 5 - (var(--cube-height) / 2) + 2px)),
				calc(var(--cube-height) * 5 + (var(--cube-height) / 2)),
				0
			);
		z-index: 6;
	}

	.bottom::before {
		width: calc(var(--cube-height) * 5);
		background-color: color-mix(in srgb, var(--cube-color), white var(--color-shade));
	}

	.bottom::after {
		display: none;
	}

	.bottom-hide {
		position: absolute;
		top: 40px;
		left: 12px;
		height: 32px;
		width: 8px;
		background-color: color-mix(in srgb, var(--cube-color), white var(--color-shade));
		z-index: 10;
	}

	.ball-container {
		position: absolute;
		top: 0;
		left: 5px;
		width: var(--ball-size);
		height: var(--ball-size);
		display: inline-block;
		perspective: var(--ball-size);
		perspective-origin: 100% 0;
		z-index: 12;
		animation:
			ball-roll 10s linear infinite,
			ball-index 10s linear infinite;
	}

	.ball {
		display: inline-block;
		width: var(--ball-size);
		height: var(--ball-size);
		margin: 0;
		border-radius: 50%;
		position: relative;
		background: radial-gradient(ellipse at center, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
		overflow: hidden;
	}

	.highlight {
		content: "";
		position: absolute;
		top: 0.5%;
		left: 2%;
		width: 96%;
		height: 96%;
		border-radius: 50%;
		background: radial-gradient(
			circle at 50% 0px,
			rgba(255, 255, 255, 0.8),
			rgba(255, 255, 255, 0.2) 58%
		);
		z-index: 2;
		transform: rotate(55deg);
	}

	.shadow-bottom {
		position: absolute;
		width: 100%;
		height: 150%;
		background: radial-gradient(
			circle at 50% 50%,
			rgba(0, 0, 0, 0.2),
			rgba(0, 0, 0, 0.05) 40%,
			rgba(0, 0, 0, 0) 50%
		);
		transform: rotateX(-25deg);
		bottom: -25px;
		left: -10px;
		z-index: -1;
		animation: shadow-bottom 10s linear infinite;
	}

	.shadow-side {
		position: absolute;
		width: 100%;
		height: 150%;
		background: radial-gradient(
			circle at 50% 50%,
			rgba(0, 0, 0, 0.2),
			rgba(0, 0, 0, 0.05) 40%,
			rgba(0, 0, 0, 0) 50%
		);
		transform: rotateX(-45deg) rotateZ(250deg) rotateY(230deg);
		bottom: -8px;
		left: -15px;
		z-index: -1;
		animation: shadow-side 10s linear infinite;
	}

	@keyframes ball-roll {
		0%,
		100% {
			transform: translate(-5px, -3px);
		}
		8.33% {
			transform: translate(42px, 30px);
		}
		16.66% {
			transform: translate(10px, 53px);
		}
		24.99% {
			transform: translate(10px, 4px);
		}
		33.32% {
			transform: translate(55px, 37px);
		}
		41.65% {
			transform: translate(7px, 68px);
		}
		49.98% {
			transform: translate(7px, 21px);
		}
		58.31% {
			transform: translate(42px, 45px);
		}
		66.64% {
			transform: translate(-5px, 76px);
		}
		74.79% {
			transform: translate(-5px, 13px);
		}
		83.3% {
			transform: translate(29px, 37px);
		}
		91.63% {
			transform: translate(-5px, 61px);
		}
	}

	@keyframes ball-index {
		0%,
		18.99%,
		100% {
			z-index: 9;
		}
		19%,
		33.31% {
			z-index: 1;
		}
		33.32%,
		48.99% {
			z-index: 12;
		}
		49%,
		57.30% {
			z-index: 3;
		}
		58.31%,
		66.63% {
			z-index: 1;
		}
		66.64%,
		77.99% {
			z-index: 12;
		}
		78%,
		85.99% {
			z-index: 5;
		}
		86%,
		99.99% {
			z-index: 1;
		}
	}

	@keyframes shadow-bottom {
		2%,
		16.65% {
			visibility: visible;
		}
		0%,
		16.66%,
		100% {
			visibility: hidden;
		}
	}

	@keyframes shadow-side {
		0%,
		33.31%,
		49.98%,
		100% {
			visibility: hidden;
		}
		33.32% {
			visibility: visible;
		}
	}
</style>
